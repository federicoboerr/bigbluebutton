<?xml version="1.0" encoding="utf-8"?>

<!--
  BigBlueButton open source conferencing system - http://www.bigbluebutton.org
  
  Copyright (c) 2010 BigBlueButton Inc. and by respective authors (see below).
  
  BigBlueButton is free software; you can redistribute it and/or modify it under the 
  terms of the GNU Lesser General Public License as published by the Free Software 
  Foundation; either version 2.1 of the License, or (at your option) any later 
  version. 
  
  BigBlueButton is distributed in the hope that it will be useful, but WITHOUT ANY 
  WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A 
  PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.
  
  You should have received a copy of the GNU Lesser General Public License along 
  with BigBlueButton; if not, see <http://www.gnu.org/licenses/>.
 
  $Id: $
--> 

<mx:Button xmlns:mx="http://www.adobe.com/2006/mxml" xmlns:mate="http://mate.asfusion.com/"
           icon="{camIcon}" click="openPublishWindow()" creationComplete="init()"
    		   mouseOver = "mouseOverHandler(event)"
    		   mouseOut = "mouseOutHandler(event)"
    		   toolTip="{ResourceUtil.getInstance().getString('bbb.toolbar.video.toolTip')}"
    		   visible="{isPresenter}"
    		   implements="org.bigbluebutton.common.IBbbToolbarComponent">
	
  <mate:Listener type="{OpenPublishWindowEvent.OPEN_PUBLISH_WINDOW}" receive="enabled=false" />
  
	<mx:Script>
		<![CDATA[
			import com.asfusion.mate.events.Dispatcher;
			import org.bigbluebutton.common.LogUtil;
			import org.bigbluebutton.common.Images;
			import org.bigbluebutton.main.views.MainToolbar;
      import org.bigbluebutton.modules.videoconf.events.ClosePublishWindowEvent;
			import org.bigbluebutton.modules.videoconf.events.OpenPublishWindowEvent;
      import org.bigbluebutton.main.events.BBBEvent;
			import org.bigbluebutton.util.i18n.ResourceUtil;
			
			[Bindable] public var isPresenter:Boolean;
			
			private var images:Images = new Images();
			[Bindable] public var camIcon:Class = images.webcam;
      
			public const OFF_STATE:Number = 0;
			public const ON_STATE:Number = 1;			
			private var _currentState:Number = OFF_STATE;
      
			public const STOP_PUBLISHING:Number = 0;
			public const START_PUBLISHING:Number = 1;
      
			private var dispatcher:Dispatcher;
			
			private function init():void{
				dispatcher = new Dispatcher();
        this.enabled = true;
        this.selected = false;
        _currentState = OFF_STATE;
			}
      
			public function publishingStatus(status:Number):void {
				if(status == START_PUBLISHING) {
          LogUtil.debug("publishingStatus: START_PUBLISHING");
					_currentState = ON_STATE;
					camIcon = images.webcamOn;
					this.enabled = true;
          this.selected = true;
				}
				else {
          LogUtil.debug("publishingStatus: STOP_PUBLISHING");
					_currentState = OFF_STATE;
					camIcon = images.webcam;
					this.enabled = true;
          this.selected = false;
				}
			}
			
			private function openPublishWindow():void{
        /*dispatchEvent(new OpenPublishWindowEvent());*/
        
				if(_currentState == ON_STATE) {
          LogUtil.debug("Close camera");
          /*_currentState = OFF_STATE;
          camIcon = images.webcam;
          this.selected = false;*/
          
          dispatchEvent(new ClosePublishWindowEvent());
				} else {
					LogUtil.debug("Open publish window");
          /*_currentState = ON_STATE;*/
          /*camIcon = images.webcamOn;*/
          /*this.selected = true;*/
          
          dispatchEvent(new OpenPublishWindowEvent());
				}
			}
			
			public function show():void{
				this.enabled = true;
				camIcon = images.webcam;
			}
			
			public function getAlignment():String{
				return MainToolbar.ALIGN_LEFT;
			}
      
			private function mouseOverHandler(event:MouseEvent):void {
				if(_currentState == ON_STATE)
					camIcon = images.webcamClose;
				else
					camIcon = images.webcamOn;			
			}

			private function mouseOutHandler(event:MouseEvent):void {
				if(_currentState == ON_STATE)
					camIcon = images.webcamOn;
				else
					camIcon = images.webcam;			
			}
		]]>
      
	</mx:Script>
</mx:Button>
